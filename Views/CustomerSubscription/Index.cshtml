@{
    Layout = "_Layout";
    ViewBag.Title = "Subscription Dashboard";
}
<script src="~/js/jquery.js"></script>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet" />

<link href="~/lib/sweetalert/sweetalert2.min.css" rel="stylesheet" />
<script src="~/js/global.js"></script>
<script src="~/lib/sweetalert/sweetalert2.all.min.js"></script>
<div class="container my-4">
    <h2 class="mb-4 text-primary">Subscription Dashboard</h2>

    <!-- Tabs -->
    <ul class="nav nav-tabs" id="subTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="view-tab" data-bs-toggle="tab" data-bs-target="#view" type="button">View Subscriptions</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="manage-tab" data-bs-toggle="tab" data-bs-target="#manage" type="button">Manage Subscriptions</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="count-tab" data-bs-toggle="tab" data-bs-target="#count" type="button">Update Count</button>
        </li>
    </ul>

    <div class="tab-content mt-3">

        <!-- View Subscriptions -->
        <div class="tab-pane fade show active" id="view">
            <div class="card p-3 mb-4 shadow-sm rounded">
                <div class="row g-3 align-items-end">
                    <div class="col-md-2">
                        <label class="form-label">Customer ID</label>
                        <input type="text" id="viewCustomerId" class="form-control" placeholder="Enter Customer ID" />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Subscription Name</label>
                        <input type="text" id="viewSubscriptionName" class="form-control" placeholder="Optional" />
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Start Date</label>
                        <input type="date" id="viewStart" class="form-control" />
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">End Date</label>
                        <input type="date" id="viewEnd" class="form-control" />
                    </div>
                    <div class="col-md-2">
                        <button id="btnViewSearch" class="btn btn-primary w-100" data-bs-toggle="tooltip" title="Search subscriptions">
                            <i class="bi bi-search"></i> Search
                        </button>
                    </div>
                    <div class="col-md-1">
                        <button id="btnViewReset" class="btn btn-secondary w-100" data-bs-toggle="tooltip" title="Clear all fields">
                            <i class="bi bi-arrow-counterclockwise"></i> Reset
                        </button>
                    </div>
                </div>
            </div>

            <div class="table-responsive shadow-sm rounded">
                <table class="table table-bordered table-striped table-hover" id="tblViewSubs">
                    <thead class="table-dark">
                        <tr>
                            <th>ID</th>
                            <th>Customer ID</th>
                            <th>Name</th>
                            <th>Subscription</th>
                            <th>Count</th>
                            <th>Start</th>
                            <th>End</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>

        <!-- Manage Subscriptions -->
        <div class="tab-pane fade" id="manage">
            <div class="card p-3 mb-4 shadow-sm rounded">
                <div class="row g-3 align-items-end">
                    <div class="col-md-2">
                        <label class="form-label">Customer ID</label>
                        <input type="text" id="manageCustomerId" class="form-control" placeholder="Enter Customer ID" />
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Customer Name</label>
                        <input type="text" id="manageCustomerName" class="form-control" placeholder="Enter Customer Name" />
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Subscription Name</label>
                        <input type="text" id="manageSubscriptionName" class="form-control" placeholder="Enter Subscription Name" />
                    </div>
                    <div class="col-md-1">
                        <label class="form-label">Count</label>
                        <input type="number" id="manageCount" class="form-control" value="1" min="1" />
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Start Date</label>
                        <input type="date" id="manageStart" class="form-control" />
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">End Date</label>
                        <input type="date" id="manageEnd" class="form-control" />
                    </div>
                </div>
                <div class="mt-3 d-flex gap-2">
                    <button id="btnAddSub" class="btn btn-success" data-bs-toggle="tooltip" title="Add new subscription">
                        <i class="bi bi-plus-lg"></i> Add
                    </button>
                    <button id="btnUpdateSub" class="btn btn-primary" data-bs-toggle="tooltip" title="Update selected subscription">
                        <i class="bi bi-pencil-square"></i> Update
                    </button>
                    <button id="btnDeleteSub" class="btn btn-danger" data-bs-toggle="tooltip" title="Delete selected subscription">
                        <i class="bi bi-trash"></i> Delete
                    </button>
                    <button id="btnManageReset" class="btn btn-secondary" data-bs-toggle="tooltip" title="Clear all fields">
                        <i class="bi bi-arrow-counterclockwise"></i> Reset
                    </button>

                </div>
            </div>

            <div class="table-responsive shadow-sm rounded">
                <table class="table table-bordered table-striped table-hover" id="tblManageSubs">
                    <thead class="table-dark">
                        <tr>
                            <th>ID</th>
                            <th>Customer ID</th>
                            <th>Name</th>
                            <th>Subscription Name</th>
                            <th>Count</th>
                            <th>Start</th>
                            <th>End</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>

        <!-- Update Subscription Count -->
        <div class="tab-pane fade" id="count">
            <div class="card p-3 mb-4 shadow-sm rounded">
                <div class="row g-3 align-items-end">
                    <div class="col-md-4">
                        <label class="form-label">Customer ID</label>
                        <input type="text" id="countCustomerId" class="form-control" placeholder="Enter Customer ID" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Subscription Name</label>
                        <input type="text" id="countSubscriptionName" class="form-control" placeholder="Enter Subscription Name" />
                    </div>
                    <div class="col-md-4 d-flex gap-2">
                        <button class="btn btn-success w-50" id="btnIncrement" data-bs-toggle="tooltip" title="Increment subscription count">
                            <i class="bi bi-plus-lg"></i> +1
                        </button>
                        <button class="btn btn-danger w-50" id="btnDecrement" data-bs-toggle="tooltip" title="Decrement subscription count">
                            <i class="bi bi-dash-lg"></i> -1
                        </button>
                        <button id="btnCountReset" class="btn btn-secondary w-50" data-bs-toggle="tooltip" title="Clear fields">
                            <i class="bi bi-arrow-counterclockwise"></i> Reset
                        </button>

                    </div>

                </div>
            </div>

            <div class="table-responsive shadow-sm rounded">
                <table class="table table-bordered table-striped table-hover" id="tblCountSubs">
                    <thead class="table-dark">
                        <tr>
                            <th>Customer ID</th>
                            <th>Subscription Name</th>
                            <th>Count</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>

    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script>

        document.getElementById('btnViewReset').addEventListener('click', () => {
        document.getElementById('viewCustomerId').value = '';
        document.getElementById('viewSubscriptionName').value = '';
        document.getElementById('viewStart').value = '';
        document.getElementById('viewEnd').value = '';
        selectedManageRow = null; // reset selected row
        loadView(); // reload table without filters
    });

    document.getElementById('btnCountReset').addEventListener('click', () => {
        document.getElementById('countCustomerId').value = '';
        document.getElementById('countSubscriptionName').value = '';
        selectedManageRow = null; // reset selected row
        loadCount(); // reload table
    });
        document.getElementById('btnManageReset').addEventListener('click', () => {
        document.getElementById('manageCustomerId').value = '';
        document.getElementById('manageCustomerName').value = '';
        document.getElementById('manageSubscriptionName').value = '';
        document.getElementById('manageCount').value = 1;
        document.getElementById('manageStart').value = '';
        document.getElementById('manageEnd').value = '';
        selectedManageRow = null;
        loadManage(); // reload table
    });


           const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    tooltipTriggerList.map(el => new bootstrap.Tooltip(el));


    // ------------------- Utilities -------------------
    function highlightRow(row) {
        const table = row.closest('table');
        Array.from(table.querySelectorAll('tr')).forEach(r => r.classList.remove('table-primary'));
        row.classList.add('table-primary');
        selectedManageRow = row;
    }

    function formatStatus(active) {
        return active
            ? '<span class="badge bg-success">Active</span>'
            : '<span class="badge bg-secondary">Inactive</span>';
    }

    function fillManageForm(subscription) {
        document.getElementById('manageCustomerId').value = subscription.customerId;
        document.getElementById('manageCustomerName').value = subscription.customerName;
        document.getElementById('manageSubscriptionName').value = subscription.subscriptionName;
        document.getElementById('manageCount').value = subscription.subscriptionCount;
        document.getElementById('manageStart').value = subscription.startDate ? new Date(subscription.startDate).toISOString().split('T')[0] : '';
        document.getElementById('manageEnd').value = subscription.endDate ? new Date(subscription.endDate).toISOString().split('T')[0] : '';
    }

    let selectedManageRow = null;

    // ------------------- Load View -------------------
    async function loadView(customerId = '', subscriptionName = '', startDate = '', endDate = '') {
        loaderEnable();
        try {
            const url = `/api/subscriptions?customerId=${encodeURIComponent(customerId)}&subscriptionName=${encodeURIComponent(subscriptionName)}&startDate=${encodeURIComponent(startDate)}&endDate=${encodeURIComponent(endDate)}`;
            const res = await fetch(url, { credentials: 'same-origin' });
            if (!res.ok) throw new Error(await res.text());

            const list = await res.json();
            const tbody = document.querySelector('#tblViewSubs tbody');
            tbody.innerHTML = '';

            list.forEach(s => {
                const tr = document.createElement('tr');
                tr.dataset.active = s.active;
                tr.innerHTML = `
                    <td>${s.id}</td>
                    <td>${s.customerId}</td>
                    <td>${s.customerName}</td>
                    <td>${s.subscriptionName}</td>
                    <td>${s.subscriptionCount}</td>
                    <td>${formatDate(s.startDate)}</td>
                    <td>${s.endDate ? formatDate(s.endDate) : ''}</td>
                    <td>${formatStatus(s.active)}</td>
                `;
                tr.addEventListener('click', () => {
                    fillManageForm(s);
                    highlightRow(tr);
                    bootstrap.Tab.getOrCreateInstance(document.getElementById('manage-tab')).show();
                });
                tbody.appendChild(tr);
            });
        } catch (err) {
            ShowErrorAlertMessage('Error loading subscriptions: ' + err.message);
        } finally {
            loaderDisable();
        }
    }

    // ------------------- Load Manage -------------------
    async function loadManage(customerId = '', subscriptionName = '') {
        loaderEnable();
        try {
            const url = `/api/subscriptions?customerId=${encodeURIComponent(customerId)}&subscriptionName=${encodeURIComponent(subscriptionName)}`;
            const res = await fetch(url, { credentials: 'same-origin' });
            if (!res.ok) throw new Error(await res.text());

            const list = await res.json();
            const tbody = document.querySelector('#tblManageSubs tbody');
            tbody.innerHTML = '';

            list.forEach(s => {
                const tr = document.createElement('tr');
                tr.dataset.active = s.active;
                tr.innerHTML = `
                    <td>${s.id}</td>
                    <td>${s.customerId}</td>
                    <td>${s.customerName}</td>
                    <td>${s.subscriptionName}</td>
                    <td>${s.subscriptionCount}</td>
                    <td>${formatDate(s.startDate)}</td>
                    <td>${s.endDate ? formatDate(s.endDate) : ''}</td>
                    <td>${formatStatus(s.active)}</td>
                `;
                tr.addEventListener('click', () => fillManageForm(s));
                tbody.appendChild(tr);
            });
        } catch (err) {
            ShowErrorAlertMessage('Error loading manage subscriptions: ' + err.message);
        } finally {
            loaderDisable();
        }
    }

    // ------------------- Manage Subscription -------------------
    // async function manageSubscription(action) {
    //     if (!selectedManageRow && (action === 'update' || action === 'delete')) {
    //         ShowErrorAlertMessage('Select a subscription from the table first');
    //         return;
    //     }

    //     const data = {
    //         CustomerId: document.getElementById('manageCustomerId').value.trim(),
    //         CustomerName: document.getElementById('manageCustomerName').value.trim(),
    //         SubscriptionName: document.getElementById('manageSubscriptionName').value.trim(),
    //         SubscriptionCount: parseInt(document.getElementById('manageCount').value),
    //         StartDate: document.getElementById('manageStart').value,
    //         EndDate: document.getElementById('manageEnd').value,
    //         Active: selectedManageRow ? selectedManageRow.dataset.active === 'true' : true
    //     };
        async function manageSubscription(action) {
        try {
            // Validate selection for update/delete actions
            if (!selectedManagement && (action === 'update' || action === 'delete')) {
                ShowErrorAlertMessage('Select a subscription from the table first');
                return;
            }

            // Validate required fields
            const customerId = document.getElementById('manageCustomerId').value.trim();
            const customerName = document.getElementById('manageCustomerName').value.trim();
            const subscriptionName = document.getElementById('manageSubscriptionName').value.trim();

            if (!customerId || !customerName || !subscriptionName) {
                ShowErrorAlertMessage('Please fill in all required fields');
                return;
            }

            const data = {
                CustomerId: customerId,
                CustomerName: customerName,
                SubscriptionName: subscriptionName,
                SubscriptionCount: parseInt(document.getElementById('manageCount').value) || 0,
                StartDate: document.getElementById('manageStart').value,
                EndDate: document.getElementById('manageEnd').value,
                Active: selectedManagement ? selectedManagement.dataset.active === 'true' : true
            };

            // Your API call logic here...
            console.log('Subscription data:', data);

        } catch (error) {
            console.error('Error in manageSubscription:', error);
            ShowErrorAlertMessage('An error occurred while processing your request');
        }
    }
        // ------------------- Client-side Validation -------------------
        if (!data.CustomerId || !data.CustomerName || !data.SubscriptionName) {
            ShowErrorAlertMessage('All fields are required');
            return;
        }
        if (!data.SubscriptionCount || data.SubscriptionCount < 1) {
            ShowErrorAlertMessage('Subscription Count must be at least 1');
            return;
        }
        if (!data.StartDate || !data.EndDate) {
            ShowErrorAlertMessage('Start Date and End Date are required');
            return;
        }
        if (new Date(data.EndDate) < new Date(data.StartDate)) {
            ShowErrorAlertMessage('End Date cannot be earlier than Start Date');
            return;
        }

        loaderEnable();
        try {
            const url = `/api/subscriptions/${action}`;
            const res = await fetch(url, {
                method: 'POST',
                credentials: 'same-origin',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            if (!res.ok) throw new Error(await res.text());

            ShowAlertMessage(`Subscription ${action}d successfully!`);
            selectedManageRow = null;
            await loadManage();
            await loadView();
            await loadCount();
        } catch (err) {
            ShowErrorAlertMessage(`Failed to ${action} subscription: ${err.message}`);
        } finally {
            loaderDisable();
        }
    }

    // ------------------- Count -------------------
    async function loadCount() {
        loaderEnable();
        try {
            const customerId = document.getElementById('countCustomerId').value.trim();
            const subscriptionName = document.getElementById('countSubscriptionName').value.trim();
            const url = `/api/subscriptions?customerId=${encodeURIComponent(customerId)}&subscriptionName=${encodeURIComponent(subscriptionName)}`;
            const res = await fetch(url, { credentials: 'same-origin' });
            if (!res.ok) throw new Error(await res.text());

            const list = await res.json();
            const tbody = document.querySelector('#tblCountSubs tbody');
            tbody.innerHTML = '';
            list.forEach(s => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${s.customerId}</td>
                    <td>${s.subscriptionName}</td>
                    <td>${s.subscriptionCount}</td>`;
                tbody.appendChild(tr);
            });
        } catch (err) {
            ShowErrorAlertMessage('Error loading count: ' + err.message);
        } finally {
            loaderDisable();
        }
    }

    async function updateCount(action) {
        const cust = document.getElementById('countCustomerId').value.trim();
        const sub = document.getElementById('countSubscriptionName').value.trim();
        if (!cust || !sub) {
            ShowErrorAlertMessage('Customer ID and Subscription Name are required');
            return;
        }

        loaderEnable();
        try {
            const url = `/api/subscriptions/${encodeURIComponent(cust)}/${encodeURIComponent(sub)}/count?action=${action}`;
            const res = await fetch(url, { method: 'POST', credentials: 'same-origin' });
            if (!res.ok) throw new Error(res.statusText);

            ShowAlertMessage(`Subscription count ${action}ed successfully!`);
            await loadCount();
            await loadView();
            await loadManage();
        } catch (err) {
            ShowErrorAlertMessage(`Failed to ${action} count: ${err.message}`);
        } finally {
            loaderDisable();
        }
    }

    // ------------------- Event Listeners -------------------
    document.getElementById('btnAddSub').addEventListener('click', () => manageSubscription('add'));
    document.getElementById('btnUpdateSub').addEventListener('click', () => manageSubscription('update'));
    document.getElementById('btnDeleteSub').addEventListener('click', () => manageSubscription('delete'));

    document.getElementById('btnIncrement').addEventListener('click', () => updateCount('increment'));
    document.getElementById('btnDecrement').addEventListener('click', () => updateCount('decrement'));
    document.getElementById('countCustomerId').addEventListener('blur', loadCount);

    document.getElementById('btnViewSearch').addEventListener('click', () => {
        const customerId = document.getElementById('viewCustomerId').value.trim();
        const subscriptionName = document.getElementById('viewSubscriptionName').value.trim();
        const startDate = document.getElementById('viewStart').value;
        const endDate = document.getElementById('viewEnd').value;
        loadView(customerId, subscriptionName, startDate, endDate);
    });

    // ------------------- Initial Load -------------------
    document.addEventListener('DOMContentLoaded', async () => {
        await loadView();
        await loadManage();
        await loadCount();
    });
</script>


